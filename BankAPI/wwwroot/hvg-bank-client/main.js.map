{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/Card.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/card-creation/card-creation.component.css","webpack:///./src/app/card-creation/card-creation.component.html","webpack:///./src/app/card-creation/card-creation.component.ts","webpack:///./src/app/card-operation/card-operation.component.css","webpack:///./src/app/card-operation/card-operation.component.html","webpack:///./src/app/card-operation/card-operation.component.ts","webpack:///./src/app/card-select/card-select.component.css","webpack:///./src/app/card-select/card-select.component.html","webpack:///./src/app/card-select/card-select.component.ts","webpack:///./src/app/data.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","export class Card {\r\n\r\n    type: string;\r\n    id: number;\r\n    accountNumber: string;\r\n    owner: string;\r\n    currency: string;\r\n    balance: number;\r\n\r\n    constructor(\r\n    type: string,\r\n    id: number,\r\n    accountNumber: string,\r\n    owner: string,\r\n    currency: string,\r\n    balance: number\r\n  ) {\r\n    this.type          = type;\r\n    this.id            = id;\r\n    this.accountNumber = accountNumber;\r\n    this.owner         = owner;\r\n    this.currency      = currency;\r\n    this.balance       = balance;\r\n    }\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-8 offset-md-2\\\">\\n      <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\">\\n          Account Manager\\n        </div>\\n        <div class=\\\"card-body\\\">\\n          <div class=\\\"form-row\\\">\\n            <div class=\\\"col-12\\\">\\n              <label>\\n                Select an option\\n              </label>\\n              <select [(ngModel)]=\\\"operation\\\" name=\\\"operation\\\" class=\\\"custom-select\\\">\\n                <option [ngValue]=\\\"'create'\\\">Create an account</option>\\n                <option [ngValue]=\\\"'manage'\\\">Manage an account</option>\\n              </select>\\n            </div>\\n          </div>\\n          <br>\\n          <div *ngIf=\\\"operation ==  'manage'\\\">\\n            <app-card-select></app-card-select>\\n            <app-card-operation></app-card-operation>\\n          </div>\\n          <div *ngIf=\\\"operation == 'create'\\\">\\n            <app-card-creation></app-card-creation>\\n          </div>\\n        </div>\\n        </div>\\n      </div>\\n    </div>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  operation: string;\n\n  constructor() {\n    this.operation = \"\";\n  }\n\n}\n","import {HttpModule} from '@angular/http';\nimport { BrowserModule} from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { CardSelectComponent } from './card-select/card-select.component';\nimport { CardOperationComponent } from './card-operation/card-operation.component';\nimport { CardCreationComponent } from './card-creation/card-creation.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CardSelectComponent,\n    CardOperationComponent,\n    CardCreationComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\"","module.exports = \"<form>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-8\\\">\\n      <label>\\n        Tyoe\\n      </label>\\n    </div>\\n    <div class=\\\"col-4\\\">\\n      <label>\\n        Currency\\n      </label>\\n    </div>\\n    <div class=\\\"col-8\\\">\\n      <select\\n      class=\\\"form-control\\\"\\n      #typeInput\\n      >\\n    <option value=\\\"deposit\\\">Deposit</option>\\n    <option value=\\\"savings\\\">Savings</option>\\n    </select>\\n    </div>\\n    <div class=\\\"col-4\\\">\\n      <input\\n      type=\\\"text\\\"\\n      class=\\\"form-control\\\"\\n      #currencyInput\\n      >\\n    </div>\\n  </div>\\n  <br>\\n    <div class=\\\"row\\\">\\n    <div class=\\\"col-8\\\">\\n      <label>\\n        Tyoe\\n      </label>\\n    </div>\\n    <div class=\\\"col-12\\\">\\n      <label>\\n        Name\\n      </label>\\n    </div>\\n    <div class=\\\"col-12\\\">\\n      <input\\n      type=\\\"text\\\"\\n      class=\\\"form-control\\\"\\n      #nameInput\\n      >\\n    </div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n      <button\\n      type=\\\"text\\\"\\n      class=\\\"btn btn-success\\\"\\n      (click)=\\\"createAccount(nameInput.value, typeInput.value, currencyInput.value)\\\"\\n      >Create</button>\\n    </div>\\n  </div>\\n</form>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { DataService } from '../data.service';\n\n@Component({\n  selector: 'app-card-creation',\n  templateUrl: './card-creation.component.html',\n  styleUrls: ['./card-creation.component.css']\n})\nexport class CardCreationComponent implements OnInit {\n\n  constructor(private dataService: DataService) { }\n\n  ngOnInit() {\n  }\n\n\n  createAccount(nameInput: string, typeInput: string, currencyInput: string): void {\n    this.dataService.createAccount(typeInput, nameInput, currencyInput);\n  }\n\n}\n","module.exports = \".card-operation{\\r\\n  margin-top:30px;\\r\\n}\\r\\n\\r\\n\"","module.exports = \"<div class=\\\"card-operation\\\">\\n  <div *ngIf=\\\"dataService.selectedOperation == 'Withdraw'\\\">\\n  <form>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col\\\">\\n      <label>\\n        Amount\\n    </label>\\n      </div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-9\\\">\\n      <input\\n      type=\\\"text\\\"\\n      class=\\\"form-control\\\"\\n      #amountInput\\n      >\\n    </div>\\n    <div class=\\\"col-2\\\">\\n      <button (click)=\\\"withDraw(amountInput.value)\\\" class=\\\"btn btn-primary\\\"> withDraw </button>\\n    </div>\\n  </div>\\n</form>\\n  </div>\\n  <div *ngIf=\\\"dataService.selectedOperation == 'Upload'\\\">\\n  <form>\\n        <div class=\\\"row\\\">\\n      <div class=\\\"col\\\">\\n      <label>\\n        Amount\\n    </label>\\n      </div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-9\\\">\\n      <input\\n      type=\\\"text\\\"\\n      class=\\\"form-control\\\"\\n      #amountInput\\n      >\\n    </div>\\n    <div class=\\\"col-2\\\">\\n      <button (click)=\\\"upLoad(amountInput.value)\\\" class=\\\"btn btn-primary\\\"> UpLoad </button>\\n    </div>\\n  </div>\\n</form>\\n  </div>\\n  <div *ngIf=\\\"dataService.selectedOperation == 'Transfer'\\\">\\n  <form>\\n  <div class=\\\"form-row\\\">\\n    <div class=\\\"col-12\\\">\\n      <label>\\n        Transfer money to:\\n      </label>\\n      <select [(ngModel)]=\\\"receiverCard\\\" name=\\\"receiverCard\\\" class=\\\"custom-select\\\">\\n        <option *ngFor=\\\"let card of cards\\\" [ngValue]=\\\"card\\\">{{card.accountNumber}}</option>\\n      </select>\\n    </div>\\n  </div>\\n  <br>\\n<div class=\\\"form-row\\\">\\n    <label>\\n        Amount\\n    </label>\\n    <div class=\\\"col-12\\\">\\n      <input\\n      type=\\\"text\\\"\\n      class=\\\"form-control\\\"\\n      #amountInput\\n      >\\n    </div>\\n  </div>\\n  <br>\\n  <div class=\\\"form-row\\\">\\n    <div class=\\\"col-md-3 md-offset-5\\\">\\n      <button (click)=\\\"transfer(amountInput.value)\\\" class=\\\"btn btn-primary\\\"> Transfer </button>\\n    </div>\\n  </div>\\n</form>\\n<div *ngIf=\\\"receiverCard != null\\\" class=\\\"row\\\">\\n  <div class=\\\"col-12\\\">\\n  <h6> cardType: {{receiverCard.type}} </h6>\\n  </div>\\n<div class=\\\"col-12\\\">\\n  <h6> Owner: {{receiverCard.owner}} </h6>\\n  </div>\\n<div class=\\\"col-12\\\">\\n  <h6> currency {{receiverCard.currency}} </h6>\\n  <div>\\n</div>\\n  <div class=\\\"col-12\\\">\\n  <h6> balance {{receiverCard.balance}} </h6>\\n<div>\\n</div>\\n</div>\\n  <div *ngIf=\\\"dataService.selectedOperation == 'Delete'\\\">\\n  <form>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-12\\\">\\n      <button (click)=\\\"delete()\\\" class=\\\"btn btn-danger\\\"> Delete </button>\\n    </div>\\n  </div>\\n</form>\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {DataService} from '../data.service';\nimport { Card } from 'src/app/Card';\n\n@Component({\n  selector: 'app-card-operation',\n  templateUrl: './card-operation.component.html',\n  styleUrls: ['./card-operation.component.css']\n})\nexport class CardOperationComponent implements OnInit {\n\n  selectedOperation: string;\n  cards: Card[];\n  receiverCard: Card;\n\n  constructor(public dataService: DataService) {\n\n    this.selectedOperation = dataService.selectedOperation;\n    this.receiverCard = null;\n    this.cards = this.dataService.getCards();\n\n  }\n\n  ngOnInit() {\n  }\n\n  withDraw(amount: number) {\n    this.dataService.withDraw(amount);\n  }\n\n  upLoad(amount: number) {\n    this.dataService.upLoad(amount);\n  }\n\n  transfer(amount: number) {\n    this.dataService.transfer(amount, this.receiverCard);\n  }\n\n  delete() {\n    this.dataService.deleteAccount();\n  }\n\n\n\n}\n","module.exports = \"\"","module.exports = \"<form>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col\\\">\\n          <label>\\n      Selected an Account\\n    </label>\\n      <select [(ngModel)]=\\\"dataService.selectedCard\\\" class=\\\"custom-select\\\" name=\\\"selectedCard\\\">\\n        <option *ngFor=\\\"let card of cards\\\" [ngValue]=\\\"card\\\">{{card.accountNumber}}</option>\\n    </select>\\n    </div>\\n    <div class=\\\"col\\\">\\n      <label>\\n        Operation\\n    </label>\\n      <select [(ngModel)]=\\\"dataService.selectedOperation\\\" name=\\\"selectedOperation\\\" class=\\\"custom-select\\\">\\n        <option *ngFor=\\\"let option of cardOperations\\\" [ngValue]=\\\"option\\\">{{option}}</option>\\n      </select>\\n    </div>\\n  </div>\\n</form>\\n<div *ngIf=\\\"dataService.selectedCard != null\\\" class=\\\"row\\\">\\n  <div class=\\\"col-12\\\">\\n    <h6> cardType: {{dataService.selectedCard.type}} </h6>\\n  </div>\\n  <div class=\\\"col-12\\\">\\n    <h6> Owner: {{dataService.selectedCard.owner}} </h6>\\n  </div>\\n  <div class=\\\"col-12\\\">\\n    <h6> currency {{dataService.selectedCard.currency}} </h6>\\n  </div>\\n  <div class=\\\"col-12\\\">\\n    <h6> balance {{dataService.selectedCard.balance}} </h6>\\n  <div>\\n  </div>\\n\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { DataService } from 'src/app/data.service';\nimport { Card } from 'src/app/Card';\n\n@Component({\n  selector: 'app-card-select',\n  templateUrl: './card-select.component.html',\n  styleUrls: ['./card-select.component.css']\n})\nexport class CardSelectComponent implements OnInit {\n\n\n  cardOperations: string[];\n  cards: Card[];\n  selectedOperation: string;\n\n  constructor(public dataService: DataService) { }\n\n  ngOnInit() {\n    this.cardOperations = ['Withdraw', 'Upload', 'Transfer', 'Delete'];\n    this.cards = this.dataService.getCards();\n    this.selectedOperation = this.dataService.selectedOperation;\n  }\n}\n","import {Headers, RequestOptions} from '@angular/http';\nimport { Injectable } from '@angular/core';\nimport { Card } from 'src/app/Card';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport { getTestBed } from '@angular/core/testing';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n\n  serverUrl = 'http://localhost:60261/account';\n  selectedOperation: string;\n  selectedCard: Card;\n  cards: Card[];\n\n  constructor(private http: HttpClient) {\n    this.getData();\n  }\n\n  getData() {\n    this.cards = [];\n\n    this.http.get(this.serverUrl)\n      .subscribe((data: any[]) => {\n        data.forEach(cardjson => {\n          const card: Card = new Card(cardjson['type'], cardjson['id'], cardjson['accountNumber'],\n                                cardjson['owner'], cardjson['currency'], cardjson['balance']);\n          this.cards.push(card);\n        });\n      if (this.selectedCard != null) {\n        this.selectedCard = this.cards.filter(x => x.id == this.selectedCard.id)[0];\n      }\n      }\n    );\n  }\n\n  getCards(): Card[] {\n    return this.cards;\n  }\n\n  setOperation(operation: string) {\n    this.selectedOperation = operation;\n  }\n\n  withDraw(amount: number) {\n    const data: any = {'id': this.selectedCard.id, 'amount': amount};\n    const body: string = JSON.stringify(data);\n    const headers: Headers = new Headers({ 'Content-Type': 'application/json' });\n    const options: RequestOptions = new RequestOptions({ headers: headers });\n    this.http.put(this.serverUrl + '/' + 'withdraw', data).subscribe(x => {\n      alert('Successfull transaction');\n      this.selectedOperation = null;\n      this.getData();\n    }, (error: any) => {\n      alert(error.error);\n    });\n  }\n\n  upLoad(amount: number) {\n    const data: any = {'id': this.selectedCard.id, 'amount': amount};\n    const body: string = JSON.stringify(data);\n    const headers: Headers = new Headers({ 'Content-Type': 'application/json' });\n    const options: RequestOptions = new RequestOptions({ headers: headers });\n    this.http.put(this.serverUrl + '/' + 'upload', data).subscribe(x => {\n      alert('Successfull transaction');\n      this.selectedOperation = null;\n      this.getData();\n    }, (error: any) => {\n      alert(error.error);\n    });\n  }\n\n  transfer(amount: number, receiver: Card) {\n    const data: any = {'senderAccountId': this.selectedCard.id, 'receiverAccountId': receiver.id, 'amount': amount};\n    const body: string = JSON.stringify(data);\n    const headers: Headers = new Headers({ 'Content-Type': 'application/json' });\n    const options: RequestOptions = new RequestOptions({ headers: headers });\n    this.http.post(this.serverUrl + '/' + 'transfer', data).subscribe(x => {\n      alert('Successfull transaction');\n      this.selectedOperation = null;\n      this.getData();\n    }, (error: any) => {\n      alert(error.error);\n    });\n  }\n\n  deleteAccount() {\n    this.http.delete(this.serverUrl + '/' + this.selectedCard.id).subscribe(x => {\n      this.getData();\n    });  }\n\n  createAccount(type: string, name: string, currency: string): void {\n    const data: any = {'name': name, 'currency': currency, 'type': type};\n    const body: string = JSON.stringify(data);\n    const headers: Headers = new Headers({ 'Content-Type': 'application/json' });\n    const options: RequestOptions = new RequestOptions({ headers: headers });\n    this.http.post(this.serverUrl, data).subscribe(x => {\n      alert(\"Successfull account creation\");\n      this.getData();\n      }, (error: any) => {\n      alert(error.error);\n    });\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}